{"version":3,"sources":["components/MapChart/MapChart.js","components/sidebar.js","components/map.js","components/event.js","components/news.js","App.js","reportWebVitals.js","index.js"],"names":["highlighted","MapChart","projection","minZoom","maxZoom","zoom","translateExtent","mapWidth","id","height","width","stroke","strokeWidth","background","orientation","geography","geographies","map","geo","isHighlighted","indexOf","properties","ISO_A3","fill","onClick","console","log","style","default","transition","outline","hover","cursor","rsmKey","gql","SideBar","Map","className","Event","News","client","ApolloClient","uri","cache","InMemoryCache","App","useState","menu","setMenu","mainComp","ApolloProvider","_menu","key","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iSAcMA,EAAc,CAAC,OAqENC,EAjEE,WACf,OACE,cAAC,gBAAD,CAAeC,WAAW,gBAA1B,SACE,eAAC,gBAAD,CACEC,QAAS,IACTC,QAAS,EACTC,KAAM,IACNC,gBAAiB,CACf,EAAC,KAAe,IAChB,CAACC,KAXO,MAKZ,UAUE,cAAC,IAAD,CACEC,GAAG,QACHC,OAAQ,EACRC,MAAO,EACPC,OAAO,UACPC,YAAa,GACbC,WAAW,UACXC,YAAa,CAAC,cAGhB,cAAC,SAAD,CAAQH,OAAO,UAAUC,YAAa,KAEtC,cAAC,YAAD,CAAWD,OAAO,UAAUC,YAAa,KACzC,cAAC,cAAD,CAAaG,UA/BnB,yGA+BsCJ,OAAO,UAAUC,YAAa,GAA9D,SACG,qBAAGI,YACUC,KAAI,SAACC,GACf,IAAMC,GAC4C,IAAhDnB,EAAYoB,QAAQF,EAAIG,WAAWC,QACrC,OACE,cAAC,YAAD,CAEEP,UAAWG,EACXK,KAAMJ,EAAgB,gBAAkB,UACxCK,QAAS,kBAAMC,QAAQC,IAAIR,EAAIG,WAAWC,SAC1CK,MAAO,CACLC,QAAS,CACPC,WAAY,YACZC,QAAS,QAEXC,MAAO,CACLR,KAAM,UACNZ,OAAQ,UACRkB,WAAY,YACZG,OAAQ,UACRF,QAAS,UAdRZ,EAAIe,oB,+cC/CTC,YAAH,KAOEA,YAAH,KA2DCC,MAvCf,WAoCE,OAAO,gCAtBH,+BAeE,iDACA,uDACA,+CCjDOC,MATf,WACE,OACE,sBAAK5B,GAAG,MAAM6B,UAAU,YAAxB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCISC,MATf,WACE,OACE,sBAAK9B,GAAG,OAAO6B,UAAU,YAAzB,UACE,uDACA,cAAC,EAAD,QCKSE,MATf,WACE,OACE,sBAAK/B,GAAG,OAAO6B,UAAU,YAAzB,UACE,mDACA,cAAC,EAAD,QCEAG,EAAS,IAAIC,IAAa,CAC9BC,IAAK,wBACLC,MAAO,IAAIC,MA2CEC,MAxCf,WAAgB,IAAD,EACWC,mBAAS,OADpB,mBACNC,EADM,KACAC,EADA,KAGTC,EAAW,CACbb,IAAK,cAAC,EAAD,IACLE,MAAO,cAAC,EAAD,IACPC,KAAM,cAAC,EAAD,KAmBR,OACE,qBAAKF,UAAU,MAAf,SACE,eAACa,EAAA,EAAD,CAAgBV,OAAQA,EAAxB,UACE,yBAAQH,UAAU,aAAlB,UACE,0CACA,8BACE,6BArBD,CAAC,MAAO,OAAQ,SAASpB,KAAI,SAACkC,EAAOC,GAC1C,OACE,oBAEEf,UAAWU,IAASI,EAAQ,KAAO,GACnC3B,QAAS,WACPwB,EAAQG,IAJZ,SAOGA,GANIC,aAqBP,+BAAOH,EAASF,WCpCTM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9ae83ed8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography,\r\n  Graticule,\r\n  ZoomableGroup,\r\n  Sphere,\r\n  Marker,\r\n} from \"react-simple-maps\";\r\nimport { PatternLines } from \"@vx/pattern\";\r\n\r\nconst geoUrl =\r\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\nconst highlighted = [\"KOR\"];\r\nconst mapWidth = 800;\r\nconst mapHeight = 550;\r\n\r\nconst MapChart = () => {\r\n  return (\r\n    <ComposableMap projection=\"geoEqualEarth\">\r\n      <ZoomableGroup\r\n        minZoom={1.5}\r\n        maxZoom={3}\r\n        zoom={1.5}\r\n        translateExtent={[\r\n          [-mapWidth * 2, 50],\r\n          [mapWidth * 2, mapHeight],\r\n        ]}\r\n      >\r\n        {/* Ìå®ÌÑ¥ */}\r\n        <PatternLines\r\n          id=\"lines\"\r\n          height={4}\r\n          width={4}\r\n          stroke=\"#e5d5c0\"\r\n          strokeWidth={0.5}\r\n          background=\"#026c80\"\r\n          orientation={[\"diagonal\"]}\r\n        />\r\n        {/* Ïô∏Í≥ΩÏÑ† */}\r\n        <Sphere stroke=\"#ecae7d\" strokeWidth={0.3} />\r\n        {/* ÏúÑÎèÑÍ≤ΩÎèÑ */}\r\n        <Graticule stroke=\"#ecae7d\" strokeWidth={0.3} />\r\n        <Geographies geography={geoUrl} stroke=\"#026c80\" strokeWidth={0.2}>\r\n          {({ geographies }) =>\r\n            geographies.map((geo) => {\r\n              const isHighlighted =\r\n                highlighted.indexOf(geo.properties.ISO_A3) !== -1;\r\n              return (\r\n                <Geography\r\n                  key={geo.rsmKey}\r\n                  geography={geo}\r\n                  fill={isHighlighted ? \"url('#lines')\" : \"#8db4ad\"}\r\n                  onClick={() => console.log(geo.properties.ISO_A3)}\r\n                  style={{\r\n                    default: {\r\n                      transition: \"all 250ms\",\r\n                      outline: \"none\",\r\n                    },\r\n                    hover: {\r\n                      fill: \"#ed6335\",\r\n                      stroke: \"#e9311a\",\r\n                      transition: \"all 250ms\",\r\n                      cursor: \"pointer\",\r\n                      outline: \"none\",\r\n                    },\r\n                  }}\r\n                />\r\n              );\r\n            })\r\n          }\r\n        </Geographies>\r\n        {/* <Marker coordinates={[-101, 53]} fill=\"#777\">\r\n          <text textAnchor=\"middle\" fill=\"#F53\">\r\n            Canada\r\n          </text>\r\n        </Marker> */}\r\n      </ZoomableGroup>\r\n    </ComposableMap>\r\n  );\r\n};\r\n\r\nexport default MapChart;\r\n","import { useState } from \"react\";\r\nimport { useQuery, gql } from \"@apollo/client\";\r\nimport \"./components.css\";\r\n\r\nconst GET_ROLES = gql`\r\n  query GetRoles {\r\n    roles {\r\n      id\r\n    }\r\n  }\r\n`;\r\nconst GET_ROLE = gql`\r\n  query GetRole($id: ID!) {\r\n    role(id: $id) {\r\n      id\r\n      requirement\r\n      members {\r\n        id\r\n        last_name\r\n        serve_years\r\n      }\r\n      equipments {\r\n        id\r\n      }\r\n      softwares {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nfunction SideBar() {\r\n  // const [contentId, setContentId] = useState(\"\");\r\n\r\n  function AsideItems() {\r\n    // const roleIcons = {\r\n    //   developer: \"üíª\",\r\n    //   designer: \"üé®\",\r\n    //   planner: \"üìù\",\r\n    // };\r\n    // const { loading, error, data } = useQuery(GET_ROLES);\r\n    // if (loading) return <p className=\"loading\">Loading...</p>;\r\n    // if (error) return <p className=\"error\">Error :(</p>;\r\n\r\n    return (\r\n      <ul>\r\n        {/* {data.roles.map(({ id }) => {\r\n          return (\r\n            <li\r\n              key={id}\r\n              className={\"roleItem \" + (contentId === \"id\" ? \"on\" : \"\")}\r\n              onClick={() => {\r\n                setContentId(id);\r\n              }}\r\n            >\r\n              <span>{contentId === id ? \"üî≤\" : \"‚¨õ\"}</span>\r\n              {roleIcons[id]} {id}\r\n            </li>\r\n          );\r\n        })} */}\r\n        <li>login / sign in</li>\r\n        <li>Check List for travel</li>\r\n        <li>mypage </li>\r\n      </ul>\r\n    );\r\n  }\r\n\r\n  return <aside>{AsideItems()}</aside>;\r\n}\r\n\r\nexport default SideBar;\r\n","import \"./components.css\";\r\nimport MapChart from \"./MapChart/MapChart\";\r\nimport SideBar from \"./sidebar\";\r\n\r\nfunction Map() {\r\n  return (\r\n    <div id=\"map\" className=\"component\">\r\n      <MapChart />\r\n      <SideBar />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import \"./components.css\";\r\nimport SideBar from \"./sidebar\";\r\n\r\nfunction Event() {\r\n  return (\r\n    <div id=\"news\" className=\"component\">\r\n      <div>eventeventeventevent</div>\r\n      <SideBar />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Event;\r\n","import \"./components.css\";\r\nimport SideBar from \"./sidebar\";\r\n\r\nfunction News() {\r\n  return (\r\n    <div id=\"news\" className=\"component\">\r\n      <div>newsnewsnewsnews</div>\r\n      <SideBar />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default News;\r\n","import \"./App.css\";\r\nimport React, { useState } from \"react\";\r\nimport { ApolloProvider } from \"@apollo/client\";\r\nimport { ApolloClient, InMemoryCache } from \"@apollo/client\";\r\n\r\nimport Map from \"./components/map\";\r\nimport Event from \"./components/event\";\r\nimport News from \"./components/news\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: \"http://localhost:4000\",\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nfunction App() {\r\n  const [menu, setMenu] = useState(\"Map\");\r\n\r\n  let mainComp = {\r\n    Map: <Map />,\r\n    Event: <Event />,\r\n    News: <News />,\r\n  };\r\n\r\n  function NavMenus() {\r\n    return [\"Map\", \"News\", \"Event\"].map((_menu, key) => {\r\n      return (\r\n        <li\r\n          key={key}\r\n          className={menu === _menu ? \"on\" : \"\"}\r\n          onClick={() => {\r\n            setMenu(_menu);\r\n          }}\r\n        >\r\n          {_menu}\r\n        </li>\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <ApolloProvider client={client}>\r\n        <header className=\"App-header\">\r\n          <h1>Traveler</h1>\r\n          <nav>\r\n            <ul>{NavMenus()}</ul>\r\n          </nav>\r\n        </header>\r\n        <main>{mainComp[menu]}</main>\r\n      </ApolloProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./format.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}